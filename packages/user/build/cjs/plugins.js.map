{"version":3,"sources":["../../src/plugins.ts","../../src/core/src/client.ts","../../src/global.ts"],"sourcesContent":["// const ERROR_CONSTANT = ['onerror','onunhandledrejection']\r\nimport { currrntClient } from \"./core/src/index\"\r\n\r\ntype ErrorOptionsKeys = 'onerror' | 'onunhandledrejection';\r\n\r\ntype ErrorOptions = Record<ErrorOptionsKeys,Boolean>\r\n\r\ntype ErrorType = {\r\n    type: string,\r\n    message: WechatMiniprogram.Error\r\n}\r\n\r\ntype onUnhandledRejection = {\r\n    type: string,\r\n    message: WechatMiniprogram.OnUnhandledRejectionListenerResult\r\n}\r\n\r\nimport { eventHandler } from \"./global\"\r\n\r\nexport function wechatError() {\r\n\r\n    return function(options: Partial<ErrorOptions> = {}) {\r\n\r\n        if(currrntClient === undefined) {\r\n            throw new Error(\"client is not instantiated\")\r\n        }\r\n        const _options = {\r\n            onerror: true,\r\n            onunhandledrejection: true,\r\n            ...options\r\n        }\r\n        if(_options.onerror) {\r\n            initOnError()\r\n        }\r\n        if(_options.onunhandledrejection) {\r\n            initOnunhandledrejection()\r\n        }\r\n        //...extra\r\n    }\r\n}\r\n\r\nfunction initOnError() {\r\n    wx.onError(message => {\r\n        const event: ErrorType = {\r\n            type: 'error',\r\n            message: message\r\n        }\r\n        eventHandler['error'].push(event)\r\n        currrntClient!.triggerSend(event)\r\n    })\r\n}\r\n\r\nfunction initOnunhandledrejection() {\r\n    wx.onUnhandledRejection(reason => {\r\n        // eventHandler['unhandledrejection'].push(reason)\r\n        const event: onUnhandledRejection = {\r\n            type: 'unhandledrejection',\r\n            message: reason\r\n        }\r\n        eventHandler['unhandledrejection'].push(event)\r\n        currrntClient!.triggerSend(event)\r\n    })\r\n}\r\n\r\nexport function defaultIntegrations() {\r\n    return [wechatError]\r\n}","export type ClientOptions = {\r\n    dsn?: string;\r\n    plugins: Array<any>;\r\n    transport: Transport;\r\n    flushTime?: number;\r\n    defaultIntegrations?: Boolean\r\n}\r\n\r\nexport interface Transport {\r\n    send<T>(): Promise<T>\r\n}\r\n\r\ntype ErrorType = {\r\n    type: string,\r\n    message: WechatMiniprogram.Error\r\n}\r\n\r\ntype onUnhandledRejection = {\r\n    type: string,\r\n    message: WechatMiniprogram.OnUnhandledRejectionListenerResult\r\n}\r\n\r\ntype queue = {\r\n    type: string,\r\n    message: WechatMiniprogram.OnUnhandledRejectionListenerResult | WechatMiniprogram.Error | string\r\n}\r\n\r\nexport let currrntClient:Client | undefined = undefined\r\n\r\nexport const getCurrentScope = ():Client | undefined => {\r\n    return currrntClient\r\n}\r\nexport const setCurrentScope = (newClient: Client) => {\r\n    currrntClient = newClient\r\n}\r\n\r\nexport abstract class Client {\r\n    protected readonly _dsn?: string;\r\n    protected readonly _options: ClientOptions;\r\n    protected readonly _transport: Transport;\r\n    protected readonly _queue: queue[] = [];\r\n    protected _time: number = 0;\r\n    protected _flushTimer: number | null = null; //定时器\r\n    public colletEvent: any = null\r\n    \r\n    protected constructor(options: ClientOptions) {\r\n        this._options = options\r\n        if(options.dsn) {\r\n            this._dsn = options.dsn\r\n        } else {\r\n            console.debug(\"options missing dsn\")\r\n        }\r\n\r\n        this._transport = options.transport\r\n    }\r\n\r\n    public init(): void {\r\n        //handle plugin\r\n        const { plugins } = this._options \r\n        console.log(\"client init\")\r\n        plugins.forEach(fn => {\r\n            fn(this._options)\r\n        })\r\n    }\r\n\r\n    public sendEvent() {\r\n        if(this._queue.length === 0) {\r\n            return\r\n        }\r\n        if(this._flushTimer !== null) {\r\n            clearTimeout(this._flushTimer)\r\n            this.sendQueueHandle()\r\n        } else {\r\n            this.sendQueueHandle()\r\n        }\r\n    }\r\n\r\n    public sendQueueHandle() {\r\n        this._time = this._options.flushTime || this._time\r\n        if(this._queue.length < 30) {\r\n            this._flushTimer = setTimeout(() => {\r\n                this._transport.send()\r\n                this.sendEvent()\r\n            },this._time)\r\n        } else {\r\n            this._transport.send()\r\n            this.sendEvent()\r\n        }\r\n    } \r\n\r\n    public triggerSend(event: ErrorType | onUnhandledRejection | {type: string, message: string}) {\r\n        //cache indexdb?\r\n        this._queue.push(event)\r\n        this.sendEvent()\r\n    }\r\n\r\n    public getQueue() {\r\n        return this._queue\r\n    }\r\n}","type eventHandler = {\r\n    \"unhandledrejection\": any[],\r\n    \"error\": any[]\r\n}\r\n\r\nexport const eventHandler: eventHandler = {\r\n    'error': [],\r\n    'unhandledrejection': []\r\n}"],"mappings":"4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,yBAAAE,EAAA,gBAAAC,IAAA,eAAAC,EAAAJ,GC2BO,IAAIK,ECtBJ,IAAMC,EAA6B,CACtC,MAAS,CAAC,EACV,mBAAsB,CAAC,CAC3B,EFWO,SAASC,GAAc,CAE1B,OAAO,SAASC,EAAiC,CAAC,EAAG,CAEjD,GAAGC,IAAkB,OACjB,MAAM,IAAI,MAAM,4BAA4B,EAEhD,IAAMC,EAAW,CACb,QAAS,GACT,qBAAsB,GACtB,GAAGF,CACP,EACGE,EAAS,SACRC,EAAY,EAEbD,EAAS,sBACRE,EAAyB,CAGjC,CACJ,CAEA,SAASD,GAAc,CACnB,GAAG,QAAQE,GAAW,CAClB,IAAMC,EAAmB,CACrB,KAAM,QACN,QAASD,CACb,EACAE,EAAa,MAAS,KAAKD,CAAK,EAChCL,EAAe,YAAYK,CAAK,CACpC,CAAC,CACL,CAEA,SAASF,GAA2B,CAChC,GAAG,qBAAqBI,GAAU,CAE9B,IAAMF,EAA8B,CAChC,KAAM,qBACN,QAASE,CACb,EACAD,EAAa,mBAAsB,KAAKD,CAAK,EAC7CL,EAAe,YAAYK,CAAK,CACpC,CAAC,CACL,CAEO,SAASG,GAAsB,CAClC,MAAO,CAACV,CAAW,CACvB","names":["plugins_exports","__export","defaultIntegrations","wechatError","__toCommonJS","currrntClient","eventHandler","wechatError","options","currrntClient","_options","initOnError","initOnunhandledrejection","message","event","eventHandler","reason","defaultIntegrations"]}