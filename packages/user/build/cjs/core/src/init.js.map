{"version":3,"sources":["../../../../src/core/src/init.ts","../../../../src/core/src/client.ts"],"sourcesContent":["import { Client,getCurrentScope,setCurrentScope } from './client'\r\nimport type { ClientOptions } from './client'\r\n\r\nexport type ClientClass<F extends Client, O extends ClientOptions> = new (options: O) => F;\r\n\r\nexport function initAndBind<F extends Client, O extends ClientOptions>(\r\n    clientClass: ClientClass<F, O>,\r\n    options: O\r\n): Client | void {\r\n    const currrntClient = getCurrentScope()\r\n    if(currrntClient !== undefined) {\r\n        throw new Error(\"client has been instantiated\")\r\n    } else {\r\n        const client = new clientClass(options)\r\n        setCurrentScope(client)\r\n        client.init()\r\n        return client\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport function test() {\r\n    console.log(\"test\")\r\n}","export type ClientOptions = {\r\n    dsn?: string;\r\n    plugins: Array<any>;\r\n    transport: Transport;\r\n    flushTime?: number;\r\n    defaultIntegrations?: Boolean\r\n}\r\n\r\nexport interface Transport {\r\n    send<T>(): Promise<T>\r\n}\r\n\r\ntype ErrorType = {\r\n    type: string,\r\n    message: WechatMiniprogram.Error\r\n}\r\n\r\ntype onUnhandledRejection = {\r\n    type: string,\r\n    message: WechatMiniprogram.OnUnhandledRejectionListenerResult\r\n}\r\n\r\ntype queue = {\r\n    type: string,\r\n    message: WechatMiniprogram.OnUnhandledRejectionListenerResult | WechatMiniprogram.Error | string\r\n}\r\n\r\nexport let currrntClient:Client | undefined = undefined\r\n\r\nexport const getCurrentScope = ():Client | undefined => {\r\n    return currrntClient\r\n}\r\nexport const setCurrentScope = (newClient: Client) => {\r\n    currrntClient = newClient\r\n}\r\n\r\nexport abstract class Client {\r\n    protected readonly _dsn?: string;\r\n    protected readonly _options: ClientOptions;\r\n    protected readonly _transport: Transport;\r\n    protected readonly _queue: queue[] = [];\r\n    protected _time: number = 0;\r\n    protected _flushTimer: number | null = null; //定时器\r\n    public colletEvent: any = null\r\n    \r\n    protected constructor(options: ClientOptions) {\r\n        this._options = options\r\n        if(options.dsn) {\r\n            this._dsn = options.dsn\r\n        } else {\r\n            console.debug(\"options missing dsn\")\r\n        }\r\n\r\n        this._transport = options.transport\r\n    }\r\n\r\n    public init(): void {\r\n        //handle plugin\r\n        const { plugins } = this._options \r\n        console.log(\"client init\")\r\n        plugins.forEach(fn => {\r\n            fn(this._options)\r\n        })\r\n    }\r\n\r\n    public sendEvent() {\r\n        if(this._queue.length === 0) {\r\n            return\r\n        }\r\n        if(this._flushTimer !== null) {\r\n            clearTimeout(this._flushTimer)\r\n            this.sendQueueHandle()\r\n        } else {\r\n            this.sendQueueHandle()\r\n        }\r\n    }\r\n\r\n    public sendQueueHandle() {\r\n        this._time = this._options.flushTime || this._time\r\n        if(this._queue.length < 30) {\r\n            this._flushTimer = setTimeout(() => {\r\n                this._transport.send()\r\n                this.sendEvent()\r\n            },this._time)\r\n        } else {\r\n            this._transport.send()\r\n            this.sendEvent()\r\n        }\r\n    } \r\n\r\n    public triggerSend(event: ErrorType | onUnhandledRejection | {type: string, message: string}) {\r\n        //cache indexdb?\r\n        this._queue.push(event)\r\n        this.sendEvent()\r\n    }\r\n\r\n    public getQueue() {\r\n        return this._queue\r\n    }\r\n}"],"mappings":"4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,iBAAAE,EAAA,SAAAC,IAAA,eAAAC,EAAAJ,GC2BO,IAAIK,EAEEC,EAAkB,IACpBD,EAEEE,EAAmBC,GAAsB,CAClDH,EAAgBG,CACpB,ED7BO,SAASC,EACZC,EACAC,EACa,CAEb,GADsBC,EAAgB,IACjB,OACjB,MAAM,IAAI,MAAM,8BAA8B,EAC3C,CACH,IAAMC,EAAS,IAAIH,EAAYC,CAAO,EACtC,OAAAG,EAAgBD,CAAM,EACtBA,EAAO,KAAK,EACLA,CACX,CAIJ,CAEO,SAASE,GAAO,CACnB,QAAQ,IAAI,MAAM,CACtB","names":["init_exports","__export","initAndBind","test","__toCommonJS","currrntClient","getCurrentScope","setCurrentScope","newClient","initAndBind","clientClass","options","getCurrentScope","client","setCurrentScope","test"]}