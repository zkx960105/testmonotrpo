{"version":3,"sources":["../../src/index.ts","../../src/core/src/client.ts","../../src/core/src/init.ts","../../src/core/src/plugins.ts","../../src/core/src/transport.ts","../../src/client.ts","../../src/transport.ts","../../src/global.ts","../../src/plugins.ts"],"sourcesContent":["import { initAndBind,pluginHandler } from './core/src/index'\r\nimport { BrowserClient } from \"./client\"\r\nimport { wechatTransport } from \"./transport\"\r\nimport { defaultIntegrations } from './plugins'\r\nimport type { ClientOptions } from \"./core/src/index\" \r\n\r\nexport function init(options: ClientOptions) {\r\n    console.log('init')\r\n    const clientOptions: ClientOptions = {\r\n        ...options,\r\n        plugins: pluginHandler({\r\n            defaultIntegrations: options.defaultIntegrations ? defaultIntegrations : [],\r\n            plugins: options.plugins || []\r\n        }),\r\n        transport : options.transport || wechatTransport\r\n    }\r\n    return initAndBind(BrowserClient,clientOptions)\r\n}\r\n\r\n/**\r\n * const { init } require (\"@xxx/index\")\r\n * init({\r\n *  dsn: 'xxxxxx',\r\n *  plugins?: [],\r\n * })\r\n */","export type ClientOptions = {\r\n    dsn?: string;\r\n    plugins: Array<any>;\r\n    transport: Transport;\r\n    flushTime?: number;\r\n    defaultIntegrations?: Boolean\r\n}\r\n\r\nexport interface Transport {\r\n    send<T>(): Promise<T>\r\n}\r\n\r\ntype ErrorType = {\r\n    type: string,\r\n    message: WechatMiniprogram.Error\r\n}\r\n\r\ntype onUnhandledRejection = {\r\n    type: string,\r\n    message: WechatMiniprogram.OnUnhandledRejectionListenerResult\r\n}\r\n\r\ntype queue = {\r\n    type: string,\r\n    message: WechatMiniprogram.OnUnhandledRejectionListenerResult | WechatMiniprogram.Error | string\r\n}\r\n\r\nexport let currrntClient:Client | undefined = undefined\r\n\r\nexport const getCurrentScope = ():Client | undefined => {\r\n    return currrntClient\r\n}\r\nexport const setCurrentScope = (newClient: Client) => {\r\n    currrntClient = newClient\r\n}\r\n\r\nexport abstract class Client {\r\n    protected readonly _dsn?: string;\r\n    protected readonly _options: ClientOptions;\r\n    protected readonly _transport: Transport;\r\n    protected readonly _queue: queue[] = [];\r\n    protected _time: number = 0;\r\n    protected _flushTimer: number | null = null; //定时器\r\n    public colletEvent: any = null\r\n    \r\n    protected constructor(options: ClientOptions) {\r\n        this._options = options\r\n        if(options.dsn) {\r\n            this._dsn = options.dsn\r\n        } else {\r\n            console.debug(\"options missing dsn\")\r\n        }\r\n\r\n        this._transport = options.transport\r\n    }\r\n\r\n    public init(): void {\r\n        //handle plugin\r\n        const { plugins } = this._options \r\n        console.log(\"client init\")\r\n        plugins.forEach(fn => {\r\n            fn(this._options)\r\n        })\r\n    }\r\n\r\n    public sendEvent() {\r\n        if(this._queue.length === 0) {\r\n            return\r\n        }\r\n        if(this._flushTimer !== null) {\r\n            clearTimeout(this._flushTimer)\r\n            this.sendQueueHandle()\r\n        } else {\r\n            this.sendQueueHandle()\r\n        }\r\n    }\r\n\r\n    public sendQueueHandle() {\r\n        this._time = this._options.flushTime || this._time\r\n        if(this._queue.length < 30) {\r\n            this._flushTimer = setTimeout(() => {\r\n                this._transport.send()\r\n                this.sendEvent()\r\n            },this._time)\r\n        } else {\r\n            this._transport.send()\r\n            this.sendEvent()\r\n        }\r\n    } \r\n\r\n    public triggerSend(event: ErrorType | onUnhandledRejection | {type: string, message: string}) {\r\n        //cache indexdb?\r\n        this._queue.push(event)\r\n        this.sendEvent()\r\n    }\r\n\r\n    public getQueue() {\r\n        return this._queue\r\n    }\r\n}","import { Client,getCurrentScope,setCurrentScope } from './client'\r\nimport type { ClientOptions } from './client'\r\n\r\nexport type ClientClass<F extends Client, O extends ClientOptions> = new (options: O) => F;\r\n\r\nexport function initAndBind<F extends Client, O extends ClientOptions>(\r\n    clientClass: ClientClass<F, O>,\r\n    options: O\r\n): Client | void {\r\n    const currrntClient = getCurrentScope()\r\n    if(currrntClient !== undefined) {\r\n        throw new Error(\"client has been instantiated\")\r\n    } else {\r\n        const client = new clientClass(options)\r\n        setCurrentScope(client)\r\n        client.init()\r\n        return client\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport function test() {\r\n    console.log(\"test\")\r\n}","export function pluginHandler(options: any) {\r\n    // const defaultPlugins = options.defaultPlugins || []\r\n    let totalPlugins: any[] = []\r\n    // if(options.defaultIntegrations) {\r\n\r\n    // }\r\n    const defaultIntegrations = options.defaultIntegrations() || []\r\n    // const userPlugins = [ ...plugins.defaultIntegrations,...options.plugins]\r\n    const userPlugins = options.plugins\r\n    if(userPlugins && Array.isArray(userPlugins)) {\r\n        totalPlugins = [...defaultIntegrations,...userPlugins]\r\n    } else {\r\n        totalPlugins = [...defaultIntegrations]\r\n    }\r\n\r\n    console.log('totalPlugins',totalPlugins[0])\r\n\r\n    const resultPlugins: any[] = []\r\n    //先这样处理，直接执行\r\n    if(totalPlugins.length > 0) {\r\n        totalPlugins.forEach(fn => {\r\n            const callBack = fn()\r\n            resultPlugins.push(callBack)\r\n        })\r\n    }\r\n\r\n    return resultPlugins\r\n}","export function createTransport(options: any,makeRequest: any) {\r\n    function send() {\r\n        makeRequest(options)\r\n    }\r\n\r\n    return {\r\n        send\r\n    }\r\n}","import { Client } from \"./core/src/index\"\r\n\r\nexport class BrowserClient extends Client {\r\n    public constructor(options) {\r\n        super(options)\r\n    }\r\n}","import { createTransport } from \"./core/src/index\"\r\n\r\nexport function wechatTransport(options: any) {\r\n    function makeRequest(request: any) {\r\n\r\n        const requestOptions = {\r\n            data: request.body,\r\n            method: 'POST',\r\n            ...options.requestOptions\r\n        }\r\n\r\n        wx.request({url: options.url,...requestOptions})\r\n\r\n\r\n    }\r\n\r\n    return createTransport(options, makeRequest)\r\n}","type eventHandler = {\r\n    \"unhandledrejection\": any[],\r\n    \"error\": any[]\r\n}\r\n\r\nexport const eventHandler: eventHandler = {\r\n    'error': [],\r\n    'unhandledrejection': []\r\n}","// const ERROR_CONSTANT = ['onerror','onunhandledrejection']\r\nimport { currrntClient } from \"./core/src/index\"\r\n\r\ntype ErrorOptionsKeys = 'onerror' | 'onunhandledrejection';\r\n\r\ntype ErrorOptions = Record<ErrorOptionsKeys,Boolean>\r\n\r\ntype ErrorType = {\r\n    type: string,\r\n    message: WechatMiniprogram.Error\r\n}\r\n\r\ntype onUnhandledRejection = {\r\n    type: string,\r\n    message: WechatMiniprogram.OnUnhandledRejectionListenerResult\r\n}\r\n\r\nimport { eventHandler } from \"./global\"\r\n\r\nexport function wechatError() {\r\n\r\n    return function(options: Partial<ErrorOptions> = {}) {\r\n\r\n        if(currrntClient === undefined) {\r\n            throw new Error(\"client is not instantiated\")\r\n        }\r\n        const _options = {\r\n            onerror: true,\r\n            onunhandledrejection: true,\r\n            ...options\r\n        }\r\n        if(_options.onerror) {\r\n            initOnError()\r\n        }\r\n        if(_options.onunhandledrejection) {\r\n            initOnunhandledrejection()\r\n        }\r\n        //...extra\r\n    }\r\n}\r\n\r\nfunction initOnError() {\r\n    wx.onError(message => {\r\n        const event: ErrorType = {\r\n            type: 'error',\r\n            message: message\r\n        }\r\n        eventHandler['error'].push(event)\r\n        currrntClient!.triggerSend(event)\r\n    })\r\n}\r\n\r\nfunction initOnunhandledrejection() {\r\n    wx.onUnhandledRejection(reason => {\r\n        // eventHandler['unhandledrejection'].push(reason)\r\n        const event: onUnhandledRejection = {\r\n            type: 'unhandledrejection',\r\n            message: reason\r\n        }\r\n        eventHandler['unhandledrejection'].push(event)\r\n        currrntClient!.triggerSend(event)\r\n    })\r\n}\r\n\r\nexport function defaultIntegrations() {\r\n    return [wechatError]\r\n}"],"mappings":"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","names":["index_exports","__export","init","__toCommonJS","currrntClient","getCurrentScope","setCurrentScope","newClient","Client","options","plugins","fn","event","initAndBind","clientClass","options","getCurrentScope","client","setCurrentScope","pluginHandler","options","totalPlugins","defaultIntegrations","userPlugins","resultPlugins","fn","callBack","createTransport","options","makeRequest","send","BrowserClient","Client","options","wechatTransport","options","makeRequest","request","requestOptions","createTransport","eventHandler","wechatError","options","currrntClient","_options","initOnError","initOnunhandledrejection","message","event","eventHandler","reason","defaultIntegrations","init","options","clientOptions","pluginHandler","defaultIntegrations","wechatTransport","initAndBind","BrowserClient"]}